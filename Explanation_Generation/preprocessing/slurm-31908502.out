cuda
Dataset loaded - /work/pi_wenlongzhao_umass_edu/27/anamikaghosh/pre_processing_CSN/CodeSearchNet_Python_train_cleaned.csv
Output location - /work/pi_wenlongzhao_umass_edu/27/anamikaghosh/CS696DS-Oracle-Retrieving-Code-Explanations/Explanation-Generation/output/CSN_granite_train.csv
Starting from line 0
INFO 04-10 18:58:21 __init__.py:207] Automatically detected platform cuda.
WARNING 04-10 18:58:22 config.py:2448] Casting torch.bfloat16 to torch.float16.
INFO 04-10 18:58:36 config.py:549] This model supports multiple tasks: {'score', 'classify', 'reward', 'generate', 'embed'}. Defaulting to 'generate'.
INFO 04-10 18:58:36 llm_engine.py:234] Initializing a V0 LLM engine (v0.7.3) with config: model='/datasets/ai/ibm-granite/hub/models--ibm-granite--granite-3.0-2b-instruct/snapshots/69e41fe735f54cec1792de2ac4f124b6cc84638f', speculative_config=None, tokenizer='/datasets/ai/ibm-granite/hub/models--ibm-granite--granite-3.0-2b-instruct/snapshots/69e41fe735f54cec1792de2ac4f124b6cc84638f', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=/datasets/ai/ibm-granite/hub/models--ibm-granite--granite-3.0-2b-instruct/snapshots/69e41fe735f54cec1792de2ac4f124b6cc84638f, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 04-10 18:58:37 cuda.py:178] Cannot use FlashAttention-2 backend for Volta and Turing GPUs.
INFO 04-10 18:58:37 cuda.py:226] Using XFormers backend.
INFO 04-10 18:58:38 model_runner.py:1110] Starting to load model /datasets/ai/ibm-granite/hub/models--ibm-granite--granite-3.0-2b-instruct/snapshots/69e41fe735f54cec1792de2ac4f124b6cc84638f...
INFO 04-10 18:58:46 model_runner.py:1115] Loading model weights took 4.7199 GB
INFO 04-10 18:58:47 worker.py:267] Memory profiling takes 0.94 seconds
INFO 04-10 18:58:47 worker.py:267] the current vLLM instance can use total_gpu_memory (47.27GiB) x gpu_memory_utilization (0.90) = 42.54GiB
INFO 04-10 18:58:47 worker.py:267] model weights take 4.72GiB; non_torch_memory takes 0.06GiB; PyTorch activation peak memory takes 0.47GiB; the rest of the memory reserved for KV Cache is 37.30GiB.
INFO 04-10 18:58:48 executor_base.py:111] # cuda blocks: 30553, # CPU blocks: 3276
INFO 04-10 18:58:48 executor_base.py:116] Maximum concurrency for 4096 tokens per request: 119.35x
INFO 04-10 18:58:52 model_runner.py:1434] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 04-10 18:59:09 model_runner.py:1562] Graph capturing finished in 18 secs, took 0.26 GiB
INFO 04-10 18:59:09 llm_engine.py:436] init engine (profile, create kv cache, warmup model) took 23.03 seconds
Model loaded - /datasets/ai/ibm-granite/hub/models--ibm-granite--granite-3.0-2b-instruct/snapshots/69e41fe735f54cec1792de2ac4f124b6cc84638f
